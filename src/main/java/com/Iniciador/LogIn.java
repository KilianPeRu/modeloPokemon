/*
 * Click nbfs://nbhost            @Override
            public void paintIcon(Component c, Graphics g, int x, int y) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public int getIconWidth() {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public int getIconHeight() {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        }SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.Iniciador;

import com.Recursos.Modifiers.RoundBorder;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

/**
 * @author exosh
 */
public class LogIn extends JFrame {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/Javamon";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "root";
    Clip clip;

    /**
     * Creates new form LogIn
     */
    public LogIn() {
        initComponents();
        setofGUI();
        addKeyListeners();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        panel = setBackgroundImage("fondo1");
        title = setBackgroundImage("javamonTitle");
        logContainer = new JPanel();
        user = new JLabel();
        userField = new JTextField();
        passwd = new JLabel();
        iniciarSesion = new JButton();
        registrar = new JButton();
        passwdField = new JPasswordField();
        settings = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("frame");
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        setName("frame"); // NOI18N

        panel.setBackground(new Color(0, 0, 255));
        panel.setName(""); // NOI18N

        GroupLayout titleLayout = new GroupLayout(title);
        title.setLayout(titleLayout);
        titleLayout.setHorizontalGroup(
                titleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 389, Short.MAX_VALUE)
        );
        titleLayout.setVerticalGroup(
                titleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 178, Short.MAX_VALUE)
        );

        logContainer.setBackground(new Color(255, 255, 255));

        user.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        user.setText("Usuario:");

        userField.setText("Usuario");

        passwd.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        passwd.setText("Contraseña:");

        iniciarSesion.setText("Iniciar Sesion");
        iniciarSesion.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    iniciarSesionActionPerformed(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                } catch (ClassNotFoundException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        registrar.setText("Registrarse");
        registrar.setToolTipText("");
        registrar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                registrarActionPerformed(evt);
            }
        });

        passwdField.setText("Contraseña");

        GroupLayout logContainerLayout = new GroupLayout(logContainer);
        logContainer.setLayout(logContainerLayout);
        logContainerLayout.setHorizontalGroup(
                logContainerLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(logContainerLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(logContainerLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(logContainerLayout.createSequentialGroup()
                                                .addGroup(logContainerLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(passwd)
                                                        .addComponent(user))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(logContainerLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(userField)
                                                        .addComponent(passwdField, GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                                        .addGroup(logContainerLayout.createSequentialGroup()
                                                .addComponent(registrar, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(iniciarSesion, GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        logContainerLayout.setVerticalGroup(
                logContainerLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(logContainerLayout.createSequentialGroup()
                                .addContainerGap(52, Short.MAX_VALUE)
                                .addGroup(logContainerLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(user)
                                        .addComponent(userField, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(logContainerLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(passwd)
                                        .addComponent(passwdField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(logContainerLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(iniciarSesion)
                                        .addComponent(registrar))
                                .addContainerGap(52, Short.MAX_VALUE))
        );

        settings.setBackground(panel.getBackground());
        settings.setBorder(null);
        settings.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                settingsActionPerformed(evt);
            }
        });

        GroupLayout panelLayout = new GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
                panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelLayout.createSequentialGroup()
                                .addContainerGap(209, Short.MAX_VALUE)
                                .addComponent(title, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 296, Short.MAX_VALUE)
                                .addComponent(settings, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                        .addGroup(GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logContainer, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31))
        );
        panelLayout.setVerticalGroup(
                panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(settings, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(title, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addComponent(logContainer, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(183, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) // Cambiamos PREFERRED_SIZE por DEFAULT_SIZE y agregamos Short.MAX_VALUE
        );

        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) // Igual que arriba
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private JPanel setBackgroundImage(String archiveName) {
        JPanel panel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                // Cargar la imagen
                ImageIcon backgroundIcon = new ImageIcon("src/main/java/com/Recursos/" + archiveName + ".png"); // Cambia la ruta según tu imagen
                Image backgroundImage = backgroundIcon.getImage();
                // Dibujar la imagen como fondo
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
            }
        };
        return panel;
    }

    private void setofGUI() {
        clip = musica("src/main/java/com/Recursos/Musica/musicaTienda.wav");
        title.setOpaque(false);
        //Settea el Boton de Settings
        ImageIcon icon = new ImageIcon("src/main/java/com/Recursos/utils/engranaje.png");
        Icon image = new ImageIcon(icon.getImage());
        settings.setContentAreaFilled(false);
        settings.setBorderPainted(false);
        settings.setFocusPainted(false);
        settings.setOpaque(false);
        settings.setIcon(image);
        settings.setBorder(new EmptyBorder(0, 0, 0, 0));
        //Setteo del boton de inicio de sesion
        iniciarSesion.setBorder(new RoundBorder(10));
        iniciarSesion.setFocusPainted(false);
        iniciarSesion.setOpaque(false);
        iniciarSesion.setBackground(new Color(0, 0, 0, 255));
        iniciarSesion.setContentAreaFilled(false);
        //Setteo del boton de registro
        registrar.setBorder(new RoundBorder(10));
        registrar.setFocusPainted(false);
        registrar.setOpaque(false);
        registrar.setBackground(new Color(0, 0, 0, 255));
        registrar.setContentAreaFilled(false);
        //Settea la transparencia del panel de inicio de Sesion
        logContainer.setBackground(new Color(255, 255, 255, 180));
    }
    public void addKeyListeners() {
        KeyListener enterKeyListener = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                // No utilizado
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {
                        iniciarSesionActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "EnterKeyPressed"));
                    } catch (SQLException | ClassNotFoundException ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(panel, "Ocurrió un error al iniciar sesión.");
                    }
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // No utilizado
            }
        };

        // Agregar el KeyListener a los campos de texto
        userField.addKeyListener(enterKeyListener);
        passwdField.addKeyListener(enterKeyListener);
    }
    private void registrarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_registrarActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("Registro");
        JLabel userLabel = new JLabel("Usuario:");
        JTextField userField = new JTextField();
        JLabel passLabel = new JLabel("Contraseña");
        JPasswordField passField = new JPasswordField();
        JButton registerButton = new JButton("Registrar");
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (registerUser(userField.getText(), passField.getText())) {
                    JOptionPane.showMessageDialog(panel, "Registro exitoso!");
                } else {
                    JOptionPane.showMessageDialog(panel, "El usuario ya existe.");
                }
            }
        });
        frame.add(userLabel);
        frame.add(userField);
        frame.add(passLabel);
        frame.add(passField);
        frame.add(registerButton);
        frame.setSize(300, 200);
        frame.setLayout(new GridLayout(3, 2));
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_registrarActionPerformed
    public Clip musica(String rutaArchivo) {
        Clip clip = null;
        try {
            File archivoSonido = new File(rutaArchivo);
            AudioInputStream audioStream = AudioSystem.getAudioInputStream(archivoSonido);

            clip = AudioSystem.getClip();
            clip.open(audioStream);

            clip.loop(Clip.LOOP_CONTINUOUSLY);
            clip.start();

        } catch (UnsupportedAudioFileException e) {
            System.out.println("El archivo de audio no es compatible.");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Hubo un problema al leer el archivo de audio.");
            e.printStackTrace();
        } catch (LineUnavailableException e) {
            System.out.println("El sistema no puede reproducir el sonido.");
            e.printStackTrace();
        }
        return clip;
    }
    private void iniciarSesionActionPerformed(ActionEvent evt) throws SQLException, ClassNotFoundException {//GEN-FIRST:event_iniciarSesionActionPerformed
        // TODO add your handling code here:
        String username = userField.getText();
        String password = new String(passwdField.getPassword());

        if (authenticateUser(username, password)) {
            JOptionPane.showMessageDialog(panel, "Login exitoso!");
            new initialMenu(username, password, clip).setLocationRelativeTo(null);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(panel, "Usuario o contraseña incorrectos.");
        }
    }//GEN-LAST:event_iniciarSesionActionPerformed

    private void settingsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_settingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_settingsActionPerformed

    private static boolean authenticateUser(String username, String password) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String query = "SELECT * FROM users WHERE name = ? AND passwd = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, username);
            stmt.setString(2, password);

            ResultSet rs = stmt.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private static boolean registerUser(String username, String password) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String checkQuery = "SELECT * FROM users WHERE name = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            checkStmt.setString(1, username);

            ResultSet rs = checkStmt.executeQuery();
            if (rs.next()) {
                return false;
            }

            String insertQuery = "INSERT INTO users (name, passwd) VALUES (?, ?)";
            PreparedStatement insertStmt = conn.prepareStatement(insertQuery);
            insertStmt.setString(1, username);
            insertStmt.setString(2, password);
            insertStmt.executeUpdate();

            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new LogIn().setLocationRelativeTo(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton iniciarSesion;
    private JPanel logContainer;
    private JPanel panel;
    private JLabel passwd;
    private JPasswordField passwdField;
    private JButton registrar;
    private JButton settings;
    private JPanel title;
    private JLabel user;
    private JTextField userField;
    // End of variables declaration//GEN-END:variables
}
